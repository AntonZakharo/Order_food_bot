# –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ:
#
# –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–ª—é–¥–∞ –≤ –º–µ–Ω—é;
# –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑;
# —É–¥–∞–ª—è—Ç—å –±–ª—é–¥–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã;
# –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –∏—Ö —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π;
# –∑–∞–ø–æ–ª–Ω—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω;
# —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–∞—Ä—Ç–∞–º–∏;
# –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.
# –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ —ç—Ç–æ–º —É—á–µ–±–Ω–æ–º –±–æ—Ç–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞.


import telebot
from telebot import types
import json

user_info = {}
cart_items = []
ITEMS_PER_PAGE = 5


TOKEN = "7269694977:AAEHEemEKbBpp2w6N8hTZsLNCpnoqZ9_ywE"

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ –±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –ø–∏—Ü—Ü—ã', reply_markup=bot_start_menu())

    bot.register_next_step_handler_by_chat_id(message.chat.id, handler_start_menu)

@bot.message_handler(commands=['add_info'])
def add_info_handler(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    bot.register_next_step_handler_by_chat_id(message.chat.id, handle_name)


def handle_name(message):
    user_info['id'] = str(message.chat.id)
    name = message.text
    user_info['name'] = name
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    bot.register_next_step_handler_by_chat_id(message.chat.id, handle_telephone, name)


def handle_telephone(message, name):
    telephone = message.text
    alph = []
    try:
        telephone = int(telephone)
        user_info['phone'] = telephone
        save_info(user_info)
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    except:
        bot.send_message(message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler_by_chat_id(message.chat.id, handle_telephone, name)



def save_info(info):
    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
        data['clients'].append(info)
        with open('data.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False)

def handler_start_menu(message):
    if message.text == '–ú–µ–Ω—éüçï':
        show_menu(message)
    elif message.text[0:7] == '–ö–æ—Ä–∑–∏–Ω–∞':
        show_cart(message)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=bot_start_menu())


def show_menu(message):
    bot.send_message(message.chat.id, '–ú–µ–Ω—é', reply_markup=create_menu())

def show_cart(message):
    bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞', reply_markup=create_cart())


def bot_start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton('–ú–µ–Ω—éüçï')
    btn2 = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞üß∫')
    markup.add(btn1, btn2)
    return markup


def create_menu(page=0):
    markup = types.InlineKeyboardMarkup()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    with open('products.json', 'r', encoding='utf-8') as file:
        products_list = json.load(file)
        for product in products_list['menu_items'][start_index:end_index]:
            callback_data = f'item:{product["name"]}'
            button = types.InlineKeyboardButton(text=product['name'], callback_data=callback_data)
            markup.add(button)
        if page > 0:
            btn1 = types.InlineKeyboardButton(text='<<', callback_data=f'page:{page-1}')
            markup.add(btn1)
        if end_index < len(products_list['menu_items']):
            btn2 = types.InlineKeyboardButton(text='>>', callback_data=f'page:{page+1}')
            markup.add(btn2)
    return markup


def create_cart():
    if cart_items:
        markup = types.InlineKeyboardMarkup()
        price = 0
        temp_cart = cart_items
        for item in cart_items:
            producttype = 0
            for item2 in cart_items:
                if item == item2:
                    producttype += 1
                    temp_cart.remove(item2)

            callback_data = f'item:{item["name"]}'
            button = types.InlineKeyboardButton(text=f'{item["name"]} x{producttype} - {int(item["price"].split(" ")[0])*producttype}', callback_data=callback_data)
            markup.add(button)
            price += int(item["price"].split(' ')[0])
        total = types.InlineKeyboardButton(text=f'–ò—Ç–æ–≥–æ: {price} —Ä—É–±', callback_data='dataprice')
        markup.add(total)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        markup.add(button)
    return markup


def add_to_cart(name, price):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_cart:{name}:{price}')
    markup.add(button)
    return markup


def to_cart():
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'to_cart:')
    markup.add(button)
    return markup


@bot.callback_query_handler(func=lambda call: True)
def handle_menu(call):
    if call.data.startswith('item:'):
        chosen_product = call.data.split(':')[1]

        with open('products.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
            for product in data['menu_items']:
                if product['name'] == chosen_product:
                    photo = open(f'./images/{product["photo"]}', 'rb')
                    bot.send_photo(call.message.chat.id, photo, caption=f'{chosen_product},\n{product["price"]}', reply_markup=add_to_cart(product["name"], product["price"]))
    elif call.data.startswith('add_cart:'):
        name, price = call.data.split(':')[1], call.data.split(':')[2]

        # bot.edit_message_text(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', message_id=call.message.message_id)
        item = {
            "name": name,
            "price": price
        }
        cart_items.append(item)
        bot.send_message(call.message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=to_cart())
    elif call.data.startswith('to_cart:'):
        show_cart(call.message)
    elif call.data.startswith('page:'):
        text, page = call.data.split(':')
        markup = create_menu(int(page))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ú–µ–Ω—é:', reply_markup=markup)

if __name__ == "__main__":
    bot.polling(none_stop=True)
